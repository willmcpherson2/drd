program = { SOI ~ (exp ~ ";")* ~ EOI }

exp = _{ exp_let }

exp_let        = _{ let | exp_select }
exp_select     = _{ select | exp_where }
exp_where      = _{ where | exp_union }
exp_union      = _{ union | exp_difference }
exp_difference = _{ difference | exp_product }
exp_product    = _{ product | exp_or }
exp_or         = _{ or | exp_equals }
exp_equals     = _{ equals | exp_and }
exp_and        = _{ and | exp_not }
exp_not        = _{ not | atom }

let        = { var ~ "=" ~ exp_let+ }
select     = { var+ ~ "<-" ~ exp_select+ }
where      = { exp_union ~ "?" ~ exp_where+ }
union      = { exp_difference ~ "+" ~ exp_union+ }
difference = { exp_product ~ "-" ~ exp_difference+ }
product    = { exp_or ~ "*" ~ exp_product+ }
or         = { exp_equals ~ "|" ~ exp_or+ }
equals     = { exp_and ~ "==" ~ exp_equals+ }
and        = { exp_not ~ "&" ~ exp_and+ }
not        = { "!" ~ exp_not }

atom = _{ parens | table | row | bool | int | str | var }

parens = { "(" ~ exp ~ ")" }
table  = { "[" ~ exp* ~ "]" }
row    = { "{" ~ (var ~ exp)* ~ "}" }

bool =  { "true" | "false" }
int  = @{ "-"? ~ ASCII_DIGIT+ }
str  = @{ "'" ~ (!"'" ~ ANY)* ~ "'" }
var  = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")* }

WHITESPACE = _{ " " | "\t" | "\r" | "\n" }

COMMENT           = _{ line_comment | multiline_comment }
line_comment      =  { "--" ~ (!NEWLINE ~ ANY)* ~ (NEWLINE | EOI) }
multiline_comment =  { "/*" ~ (!"*/" ~ ANY)* ~ "*/" }
